SD Lab
Implementation

Login.html
<html>
<head>
<title>Login</title>
<style>
body { font-family: Arial, sans-serif; }
.container { max-width: 300px; margin: auto;
padding-top: 50px; }
input[type="text"], input[type="password"] { width:
100%; padding: 10px; margin: 10px 0; }
input[type="submit"] { background-color: #4CAF50; color:
white; padding: 10px; width: 100%; border: none; cursor:
pointer; }
input[type="submit"]:hover { background-color: #45a049;
}
</style>
</head>
<body>
<div class="container">
<h2>Login</h2>
<form id="loginForm">
<input type="text" id="username" name="username"
placeholder="Username" required>
<input type="password" id="password" name="password"
placeholder="Password" required>
<input type="submit" value="Login">
</form>
</div>
<script>
document.getElementById('loginForm').onsubmit =
function(event) {
event.preventDefault();
var xhr = new XMLHttpRequest();
xhr.open("POST", "/login", true);
xhr.setRequestHeader("Content-Type",
"application/x-www-form-urlencoded");
xhr.onload = function() {
if (xhr.status >= 200 && xhr.status < 300) {
window.location.href = "menu.html";
} else {
alert("Login failed: " + xhr.responseText);
}
};
var formData = "username=" +
encodeURIComponent(document.getElementById('username').value) +
"&password=" +
encodeURIComponent(document.getElementById('password').value);
xhr.send(formData);
};
</script>
</body>
</html>



Menu.html
<html>
<head>
<title>Menu</title>
<style>
body { font-family: Arial, sans-serif; text-align:
center; padding-top: 50px; }
.btn { background-color: #4CAF50; color: white; padding:
15px 20px; margin: 10px; font-size: 16px; border: none; cursor:
pointer; }
.btn:hover { background-color: #45a049; }
</style>
</head>
<body>
<h2>Welcome to Your Banking Portal</h2>
<div>
<button class="btn"
onclick="window.location.href='balance.html';">Balance</button>
<button class="btn"
onclick="window.location.href='loan.html';">Loan</button>
<button class="btn"
onclick="window.location.href='transfer.html';">Transfer</button
>
</div>
</body>
</html>


Balance.html
<html>
<head>
<title>Balance</title>
<style>
body { font-family: Arial, sans-serif; text-align:
center; padding-top: 50px; }
</style>
</head>
<body>
<h2>Your Balance</h2>
<div id="balance">Loading...</div>
<script>
function fetchBalance() {
var xhr = new XMLHttpRequest();
xhr.open("GET", "/balance", true);
xhr.onload = function() {
if (xhr.status >= 200 && xhr.status < 300) {
document.getElementById('balance').innerText
= "Your balance is: $" + xhr.responseText;
} else {
document.getElementById('balance').innerText
= "Failed to load balance.";
}
};
xhr.onerror = function() {
document.getElementById('balance').innerText =
"Error while requesting balance.";
};
xhr.send();
}
window.onload = function() {
fetchBalance();
};
</script>
</body>
</html>




Transfer.html
<html>
<head>
<title>Transfer Funds</title>
<style>
body { font-family: Arial, sans-serif; text-align:
center; padding-top: 50px; }
input[type="number"], input[type="text"] { margin: 10px
0; padding: 10px; width: 200px; }
button { background-color: #4CAF50; color: white;
padding: 10px 20px; margin: 10px; border: none; cursor: pointer;
}
button:hover { background-color: #45a049; }
</style>
</head>
<body>
<h2>Transfer Funds</h2>
<form id="transferForm">
<input type="text" id="toUid" name="toUid"
placeholder="Recipient's UID" required><br>
<input type="number" id="amount" name="amount"
placeholder="Amount" min="0.01" step="0.01" required><br>
<button type="submit">Transfer</button>
</form>
<div id="message"></div>
<script>
document.getElementById('transferForm').onsubmit =
function(event) {
event.preventDefault();
var toUid = document.getElementById('toUid').value;
var amount =
document.getElementById('amount').value;
fetchBalance().then(balance => {
if (parseFloat(amount) > parseFloat(balance)) {
document.getElementById('message').innerText
= "Transfer amount exceeds current balance.";
return;
}
var xhr = new XMLHttpRequest();
xhr.open("POST", "/transfer", true);
xhr.setRequestHeader("Content-Type",
"application/x-www-form-urlencoded");
xhr.onload = function() {
if (xhr.status >= 200 && xhr.status < 300) {
document.getElementById('message').innerText = "Transfer
successful.";
} else {
document.getElementById('message').innerText = "Transfer failed:
" + xhr.responseText;
}
};
xhr.onerror = function() {
document.getElementById('message').innerText
= "Error while requesting transfer.";
};
var formData = "toUid=" +
encodeURIComponent(toUid) +
"&amount=" +
encodeURIComponent(amount);
xhr.send(formData);
}).catch(error => {
document.getElementById('message').innerText =
"Error fetching balance.";
});
};
function fetchBalance() {
return new Promise((resolve, reject) => {
console.log('Fetching balance...');
resolve('100');
});
}
</script>
</body>
</html>



Loan.html
<html>
<head>
<title>Loan Application</title>
<style>
body { font-family: Arial, sans-serif; text-align:
center; padding-top: 50px; }
input[type="number"] { margin: 10px 0; padding: 10px;
width: 200px; }
button { background-color: #4CAF50; color: white;
padding: 10px 20px; margin: 10px; border: none; cursor: pointer;
}
button:hover { background-color: #45a049; }
.message { margin-top: 20px; }
</style>
</head>
<body>
<h2>Loan Application</h2>
<form id="loanForm">
<input type="number" id="salary" name="salary"
placeholder="Your Salary" min="1" step="any" required><br>
<input type="number" id="loanRequest" name="loanRequest"
placeholder="Loan Request Amount" min="1" step="any"
required><br>
<button type="submit">Apply for Loan</button>
</form>
<div id="message" class="message"></div>
<script>
document.getElementById('loanForm').onsubmit =
function(event) {
event.preventDefault();
var salary =
parseFloat(document.getElementById('salary').value);
var loanRequest =
parseFloat(document.getElementById('loanRequest').value);
if (loanRequest <= 60 * salary) {
document.getElementById('message').innerText =
"Loan Approved.";
} else {
document.getElementById('message').innerText =
"Loan Rejected.";
}
};
</script>
</body>
</html>



BankingServlet.java
import javax.servlet.*;
import javax.servlet.http.*;
import java.io.IOException;
import java.sql.*;
public class BankingServlet extends HttpServlet {
private String jdbcURL = "jdbc:mysql://localhost:3306/db";
private String jdbcUsername = "admin";
private String jdbcPassword = "password";
protected void doPost(HttpServletRequest request,
HttpServletResponse response) throws ServletException,
IOException {
String action = request.getServletPath();
try {
switch (action) {
case "/login":
authenticateUser(request, response);
break;
case "/transfer":
makeTransfer(request, response);
break;
default:
response.getWriter().println("Invalid
action");
break;
}
} catch (SQLException ex) {
throw new ServletException(ex);
}
}
private void authenticateUser(HttpServletRequest request,
HttpServletResponse response) throws SQLException, IOException {
String username = request.getParameter("username");
String password = request.getParameter("password");
try (Connection connection =
DriverManager.getConnection(jdbcURL, jdbcUsername,
jdbcPassword);
PreparedStatement statement =
connection.prepareStatement("SELECT uid FROM users WHERE
username = ? AND password = ?")) {
statement.setString(1, username);
statement.setString(2, password);
ResultSet resultSet = statement.executeQuery();
if (resultSet.next()) {
int uid = resultSet.getInt("uid");
HttpSession session = request.getSession();
session.setAttribute("uid", uid);
response.getWriter().println("Login
successful");
} else {
response.getWriter().println("Invalid username
or password");
}
}
}
private void makeTransfer(HttpServletRequest request,
HttpServletResponse response) throws SQLException, IOException {
int fromUid =
Integer.parseInt(request.getSession().getAttribute("uid").toStri
ng());
int toUid =
Integer.parseInt(request.getParameter("toUid"));
double amount =
Double.parseDouble(request.getParameter("amount"));
Connection connection = null;
PreparedStatement checkBalanceStmt = null;
PreparedStatement updateSenderStmt = null;
PreparedStatement updateReceiverStmt = null;
PreparedStatement insertTransactionStmt = null;
ResultSet resultSet = null;
try {
connection = DriverManager.getConnection(jdbcURL,
jdbcUsername, jdbcPassword);
connection.setAutoCommit(false);
checkBalanceStmt =
connection.prepareStatement("SELECT balance FROM users WHERE uid
= ?");
checkBalanceStmt.setInt(1, fromUid);
resultSet = checkBalanceStmt.executeQuery();
if (!resultSet.next() ||
resultSet.getDouble("balance") < amount) {
response.getWriter().println("Insufficient
balance");
return;
}
updateSenderStmt =
connection.prepareStatement("UPDATE users SET balance = balance
- ? WHERE uid = ?");
updateSenderStmt.setDouble(1, amount);
updateSenderStmt.setInt(2, fromUid);
updateSenderStmt.executeUpdate();
updateReceiverStmt =
connection.prepareStatement("UPDATE users SET balance = balance
+ ? WHERE uid = ?");
updateReceiverStmt.setDouble(1, amount);
updateReceiverStmt.setInt(2, toUid);
updateReceiverStmt.executeUpdate();
insertTransactionStmt =
connection.prepareStatement("INSERT INTO transactions (from_uid,
to_uid, amount) VALUES (?, ?, ?)");
insertTransactionStmt.setInt(1, fromUid);
insertTransactionStmt.setInt(2, toUid);
insertTransactionStmt.setDouble(3, amount);
insertTransactionStmt.executeUpdate();
connection.commit();
response.getWriter().println("Transfer successful");
} catch (SQLException e) {
if (connection != null) {
try {
connection.rollback();
} catch (SQLException ex) {
response.getWriter().println("Error during
transaction rollback");
}
}
response.getWriter().println("Error during
transfer");
} finally {
if (resultSet != null) try { resultSet.close(); }
catch (SQLException e) { /* ignored */ }
if (checkBalanceStmt != null) try {
checkBalanceStmt.close(); } catch (SQLException e) { /* ignored
*/ }
if (updateSenderStmt != null) try {
updateSenderStmt.close(); } catch (SQLException e) { /* ignored
*/ }
if (updateReceiverStmt != null) try {
updateReceiverStmt.close(); } catch (SQLException e) { /*
ignored */ }
if (insertTransactionStmt != null) try {
insertTransactionStmt.close(); } catch (SQLException e) { /*
ignored */ }
if (connection != null) try { connection.close(); }
catch (SQLException e) { /* ignored */ }
}
}
protected void doGet(HttpServletRequest request,
HttpServletResponse response) throws ServletException,
IOException {
String action = request.getServletPath();
try {
if ("/balance".equals(action)) {
showBalance(request, response);
} else {
response.getWriter().println("Invalid action");
}
} catch (SQLException ex) {
throw new ServletException(ex);
}
}
private void showBalance(HttpServletRequest request,
HttpServletResponse response) throws SQLException, IOException {
int uid =
Integer.parseInt(request.getSession().getAttribute("uid").toStri
ng());
try (Connection connection =
DriverManager.getConnection(jdbcURL, jdbcUsername,
jdbcPassword);
PreparedStatement statement =
connection.prepareStatement("SELECT balance FROM users WHERE uid
= ?")) {
statement.setInt(1, uid);
ResultSet resultSet = statement.executeQuery();
if (resultSet.next()) {
double balance = resultSet.getDouble("balance");
response.getWriter().println("Your balance: " +
balance);
} else {
response.getWriter().println("User not found");
}
}
}
}
